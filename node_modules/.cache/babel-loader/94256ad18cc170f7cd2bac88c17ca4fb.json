{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/nandhakumar/Desktop/projects/fiverr-prabha/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/nandhakumar/Desktop/projects/fiverr-prabha/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/nandhakumar/Desktop/projects/fiverr-prabha/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/nandhakumar/Desktop/projects/fiverr-prabha/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nvar Particle_1 = require(\"./Particle\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar InteractionManager_1 = require(\"./InteractionManager\");\n\nvar ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nvar Mover_1 = require(\"./Particle/Mover\");\n\nvar Particles = /*#__PURE__*/function () {\n  function Particles(container) {\n    _classCallCheck(this, Particles);\n\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.mover = new Mover_1.Mover(container);\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    var canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n  }\n\n  _createClass(Particles, [{\n    key: \"init\",\n    value: function init() {\n      var _a;\n\n      var container = this.container;\n      var options = container.actualOptions;\n      this.lastZIndex = 0;\n      this.needsSort = false;\n      this.freqs.links = new Map();\n      this.freqs.triangles = new Map();\n      var handled = false;\n      this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n      this.interactionManager.init();\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.addManualParticles();\n\n      if (!handled) {\n        for (var group in options.particles.groups) {\n          var groupOptions = options.particles.groups[group];\n\n          for (var i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n            this.addParticle(undefined, groupOptions, group);\n          }\n        }\n\n        for (var _i = this.count; _i < options.particles.number.value; _i++) {\n          this.addParticle();\n        }\n      }\n\n      container.pathGenerator.init(container);\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.clear();\n      this.init();\n      this.draw({\n        value: 0,\n        factor: 0\n      });\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var group = arguments.length > 2 ? arguments[2] : undefined;\n      var override = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (!(index >= 0 && index <= this.count)) {\n        return;\n      }\n\n      var deleted = 0;\n\n      for (var i = index; deleted < quantity && i < this.count; i++) {\n        var particle = this.array[i];\n\n        if (!particle || particle.group !== group) {\n          continue;\n        }\n\n        particle.destroy(override);\n        this.array.splice(i--, 1);\n        var zIdx = this.zArray.indexOf(particle);\n        this.zArray.splice(zIdx, 1);\n        deleted++;\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(particle, group, override) {\n      this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var container = this.container;\n      var particlesToDelete = [];\n      container.pathGenerator.update();\n\n      var _iterator2 = _createForOfIteratorHelper(container.plugins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              plugin = _step2$value[1];\n\n          if (plugin.update !== undefined) {\n            plugin.update(delta);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.array),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _particle = _step3.value;\n          var resizeFactor = container.canvas.resizeFactor;\n\n          if (resizeFactor) {\n            _particle.position.x *= resizeFactor.width;\n            _particle.position.y *= resizeFactor.height;\n          }\n\n          _particle.bubble.inRange = false;\n\n          var _iterator5 = _createForOfIteratorHelper(this.container.plugins),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var _step5$value = _slicedToArray(_step5.value, 2),\n                  _plugin = _step5$value[1];\n\n              if (_particle.destroyed) {\n                break;\n              }\n\n              if (_plugin.particleUpdate) {\n                _plugin.particleUpdate(_particle, delta);\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          this.mover.move(_particle, delta);\n\n          if (_particle.destroyed) {\n            particlesToDelete.push(_particle);\n            continue;\n          }\n\n          this.quadTree.insert(new Utils_1.Point(_particle.getPosition(), _particle));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      for (var _i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {\n        var particle = _particlesToDelete[_i2];\n        this.remove(particle);\n      }\n\n      this.interactionManager.externalInteract(delta);\n\n      var _iterator4 = _createForOfIteratorHelper(container.particles.array),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _particle2 = _step4.value;\n\n          var _iterator6 = _createForOfIteratorHelper(this.updaters),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var updater = _step6.value;\n              updater.update(_particle2, delta);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          if (!_particle2.destroyed && !_particle2.spawning) {\n            this.interactionManager.particlesInteract(_particle2, delta);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      delete container.canvas.resizeFactor;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      container.canvas.clear();\n      var canvasSize = this.container.canvas.size;\n      this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n      this.update(delta);\n\n      if (this.needsSort) {\n        this.zArray.sort(function (a, b) {\n          return b.position.z - a.position.z || a.id - b.id;\n        });\n        this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n        this.needsSort = false;\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(container.plugins),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n              plugin = _step7$value[1];\n\n          container.canvas.drawPlugin(plugin, delta);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(this.zArray),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var p = _step8.value;\n          p.draw(delta);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.array = [];\n      this.zArray = [];\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions, group) {\n      this.pushing = true;\n\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n      }\n\n      this.pushing = false;\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions, group) {\n      var container = this.container;\n      var options = container.actualOptions;\n      var limit = options.particles.number.limit * container.density;\n\n      if (limit > 0) {\n        var countToRemove = this.count + 1 - limit;\n\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n\n      return this.pushParticle(position, overrideOptions, group);\n    }\n  }, {\n    key: \"addSplitParticle\",\n    value: function addSplitParticle(parent) {\n      var splitOptions = parent.options.destroy.split;\n      var options = new ParticlesOptions_1.ParticlesOptions();\n      options.load(parent.options);\n      var factor = (0, Utils_1.getRangeValue)(splitOptions.factor.value);\n      options.color.load({\n        value: {\n          hsl: parent.getFillColor()\n        }\n      });\n\n      if (typeof options.size.value === \"number\") {\n        options.size.value /= factor;\n      } else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n      }\n\n      options.load(splitOptions.particles);\n      var offset = splitOptions.sizeOffset ? (0, Utils_1.setRangeValue)(-parent.size.value, parent.size.value) : 0;\n      var position = {\n        x: parent.position.x + (0, Utils_1.randomInRange)(offset),\n        y: parent.position.y + (0, Utils_1.randomInRange)(offset)\n      };\n      return this.pushParticle(position, options, parent.group, function (particle) {\n        if (particle.size.value < 0.5) {\n          return false;\n        }\n\n        particle.velocity.length = (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = parent.splitCount + 1;\n        particle.unbreakable = true;\n        setTimeout(function () {\n          particle.unbreakable = false;\n        }, 500);\n        return true;\n      });\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity, group) {\n      this.removeAt(0, quantity, group);\n    }\n  }, {\n    key: \"getLinkFrequency\",\n    value: function getLinkFrequency(p1, p2) {\n      var key = \"\".concat(Math.min(p1.id, p2.id), \"_\").concat(Math.max(p1.id, p2.id));\n      var res = this.freqs.links.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.freqs.links.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"getTriangleFrequency\",\n    value: function getTriangleFrequency(p1, p2, p3) {\n      var _ref = [p1.id, p2.id, p3.id],\n          id1 = _ref[0],\n          id2 = _ref[1],\n          id3 = _ref[2];\n\n      if (id1 > id2) {\n        var _ref2 = [id1, id2];\n        id2 = _ref2[0];\n        id1 = _ref2[1];\n      }\n\n      if (id2 > id3) {\n        var _ref3 = [id2, id3];\n        id3 = _ref3[0];\n        id2 = _ref3[1];\n      }\n\n      if (id1 > id3) {\n        var _ref4 = [id1, id3];\n        id3 = _ref4[0];\n        id1 = _ref4[1];\n      }\n\n      var key = \"\".concat(id1, \"_\").concat(id2, \"_\").concat(id3);\n      var res = this.freqs.triangles.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.freqs.triangles.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"addManualParticles\",\n    value: function addManualParticles() {\n      var container = this.container;\n      var options = container.actualOptions;\n\n      var _iterator9 = _createForOfIteratorHelper(options.manualParticles),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var particle = _step9.value;\n          var pos = particle.position ? {\n            x: particle.position.x * container.canvas.size.width / 100,\n            y: particle.position.y * container.canvas.size.height / 100\n          } : undefined;\n          this.addParticle(pos, particle.options);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }, {\n    key: \"setDensity\",\n    value: function setDensity() {\n      var options = this.container.actualOptions;\n\n      for (var group in options.particles.groups) {\n        this.applyDensity(options.particles.groups[group], 0, group);\n      }\n\n      this.applyDensity(options.particles, options.manualParticles.length);\n    }\n  }, {\n    key: \"applyDensity\",\n    value: function applyDensity(options, manualCount, group) {\n      var _a;\n\n      if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n        return;\n      }\n\n      var numberOptions = options.number;\n      var densityFactor = this.initDensityFactor(numberOptions.density);\n      var optParticlesNumber = numberOptions.value;\n      var optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n      var particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n      var particlesCount = Math.min(this.count, this.array.filter(function (t) {\n        return t.group === group;\n      }).length);\n      this.limit = numberOptions.limit * densityFactor;\n\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    }\n  }, {\n    key: \"initDensityFactor\",\n    value: function initDensityFactor(densityOptions) {\n      var container = this.container;\n\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n\n      var canvas = container.canvas.element;\n      var pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n    }\n  }, {\n    key: \"pushParticle\",\n    value: function pushParticle(position, overrideOptions, group, initializer) {\n      try {\n        var particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n        var canAdd = true;\n\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n\n        if (!canAdd) {\n          return;\n        }\n\n        this.array.push(particle);\n        this.zArray.push(particle);\n        this.nextId++;\n        return particle;\n      } catch (e) {\n        console.warn(\"error adding particle: \".concat(e));\n        return;\n      }\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this.array.length;\n    }\n  }]);\n\n  return Particles;\n}();\n\nexports.Particles = Particles;","map":{"version":3,"sources":["/Users/nandhakumar/Desktop/projects/fiverr-prabha/react-app/node_modules/tsparticles/Core/Particles.js"],"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","ParticlesOptions_1","Mover_1","container","nextId","array","zArray","mover","Mover","limit","needsSort","lastZIndex","freqs","links","Map","triangles","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","updaters","Plugins","getUpdaters","_a","options","actualOptions","handled","init","plugins","plugin","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","count","j","number","addParticle","pathGenerator","clear","draw","factor","index","quantity","override","deleted","particle","destroy","splice","zIdx","indexOf","removeAt","delta","particlesToDelete","update","resizeFactor","position","x","y","bubble","inRange","destroyed","particleUpdate","move","push","insert","Point","getPosition","remove","externalInteract","updater","spawning","particlesInteract","sort","a","b","z","id","length","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","parent","splitOptions","split","ParticlesOptions","load","getRangeValue","color","hsl","getFillColor","min","max","offset","sizeOffset","setRangeValue","randomInRange","velocity","splitCount","unbreakable","setTimeout","p1","p2","key","Math","res","get","random","set","p3","id1","id2","id3","manualParticles","pos","applyDensity","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","initializer","Particle","canAdd","e","console","warn"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./InteractionManager\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Mover_1 = require(\"./Particle/Mover\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.mover = new Mover_1.Mover(container);\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        var _a;\n        const container = this.container;\n        const options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.freqs.links = new Map();\n        this.freqs.triangles = new Map();\n        let handled = false;\n        this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        container.pathGenerator.init(container);\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n        }\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.bubble.inRange = false;\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            this.mover.move(particle, delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of container.particles.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split;\n        const options = new ParticlesOptions_1.ParticlesOptions();\n        options.load(parent.options);\n        const factor = (0, Utils_1.getRangeValue)(splitOptions.factor.value);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = splitOptions.sizeOffset ? (0, Utils_1.setRangeValue)(-parent.size.value, parent.size.value) : 0;\n        const position = {\n            x: parent.position.x + (0, Utils_1.randomInRange)(offset),\n            y: parent.position.y + (0, Utils_1.randomInRange)(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    getLinkFrequency(p1, p2) {\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n        let res = this.freqs.links.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.links.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.freqs.triangles.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.triangles.set(key, res);\n        }\n        return res;\n    }\n    addManualParticles() {\n        const container = this.container;\n        const options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n        const particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element;\n        const pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\nexports.Particles = Particles;\n"]},"metadata":{},"sourceType":"script"}